// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/hezbymuhammad/payment-gateway/domain"
	mock "github.com/stretchr/testify/mock"
)

// MerchantRepository is an autogenerated mock type for the MerchantRepository type
type MerchantRepository struct {
	mock.Mock
}

// InitSetting provides a mock function with given fields: ctx, m
func (_m *MerchantRepository) InitSetting(ctx context.Context, m *domain.Merchant) error {
	ret := _m.Called(ctx, m)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Merchant) error); ok {
		r0 = rf(ctx, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsAuthorizedParent provides a mock function with given fields: ctx, mg
func (_m *MerchantRepository) IsAuthorizedParent(ctx context.Context, mg *domain.MerchantGroup) (bool, error) {
	ret := _m.Called(ctx, mg)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *domain.MerchantGroup) bool); ok {
		r0 = rf(ctx, mg)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.MerchantGroup) error); ok {
		r1 = rf(ctx, mg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetChild provides a mock function with given fields: ctx, mg
func (_m *MerchantRepository) SetChild(ctx context.Context, mg *domain.MerchantGroup) error {
	ret := _m.Called(ctx, mg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.MerchantGroup) error); ok {
		r0 = rf(ctx, mg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store provides a mock function with given fields: ctx, m
func (_m *MerchantRepository) Store(ctx context.Context, m *domain.Merchant) error {
	ret := _m.Called(ctx, m)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Merchant) error); ok {
		r0 = rf(ctx, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
